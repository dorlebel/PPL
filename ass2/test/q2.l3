
(define last-element
   (lambda (lst)
      (if (empty? (cdr lst))
         (car lst)
         (last-element (cdr lst))
      )
   )
)

(define power
    (lambda (n1 n2)
       (if (eq? n2 0)
         1
         (if (eq? n2 1) 
            n1
            ( * n1 (power n1 (- n2 1)))
         )
       )
   )
)

(define sum-lst-power
    (lambda (lst n)
      (if (empty? lst) 
         0
         (+ (power (car lst) n) (sum-lst-power (cdr lst) n))
      )
    )
)
      
(define num-from-digits
  (lambda (lst)
     (if(empty? lst) 
      0
      (+ (last-element lst) (* 10 (num-from-digits(remove-last lst))))
     )        
  )
)

(define remove-last
  (lambda (lst)
     (if(empty? lst) 
      lst
      (if(empty? (cdr lst)) 
         '()
         (cons (car lst) (remove-last (cdr lst))))
     )
  )
)

(define is-narcissistic
  (lambda (lst)
       (eq? (num-from-digits lst) (sum-lst-power lst (num-of-digits lst))) 
    )
)
 
(define num-of-digits
  (lambda (lst)
       (if(empty? lst)
       0
       (+ 1 (num-of-digits(cdr lst))))
    )
)

(define empty?
  (lambda (lst)
        (eq? lst '())))

